% Adaptation du package algorithmicx pour écrire les algorithmes
% du cours de logique à l'ESI

\usepackage{algpseudocode}		% Permet d'écrire des algorithmes
\usepackage{algorithm}			% Pour des algorithmes flottants
\usepackage{environ}                    % Pour avoir un cadre autour du pseudo-code

% ==============================================================================
% Le code suivant permet d'avoir des lignes verticales pour délimiter les blocs. 
% cf: http://tex.stackexchange.com/questions/52473/is-it-possible-to-have-connecting-loop-lines-like-algorithm2e-in-algorithmic
% J'ai changé la ligne (plus grosse et grise)
% ==============================================================================
\makeatletter
% This is the vertical rule that is inserted
\definecolor{rulecolor}{gray}{0.7}
\def\therule{\makebox[\algorithmicindent][l]{\hspace*{.4em}{\color{rulecolor}\vrule height .75\baselineskip width 0.05em depth .25\baselineskip}}}%

\newtoks\therules% Contains rules
\therules={}% Start with empty token list
\def\appendto#1#2{\expandafter#1\expandafter{\the#1#2}}% Append to token list
\def\gobblefirst#1{% Remove (first) from token list
  #1\expandafter\expandafter\expandafter{\expandafter\@gobble\the#1}}%
\def\LState{\State\unskip\the\therules}% New line-state
\def\pushindent{\appendto\therules\therule}%
\def\popindent{\gobblefirst\therules}%
\def\printindent{\unskip\the\therules}%
\def\printandpush{\printindent\pushindent}%
\def\popandprint{\popindent\printindent}%

%      ***      DECLARED LOOPS      ***
% (from algpseudocode.sty)
\algdef{SE}[WHILE]{While}{EndWhile}[1]
  {\printandpush\algorithmicwhile\ #1\ \algorithmicdo}
  {\popandprint\algorithmicend\ \algorithmicwhile}%
\algdef{SE}[FOR]{For}{EndFor}[1]
  {\printandpush\algorithmicfor\ #1\ \algorithmicdo}
  {\popandprint\algorithmicend\ \algorithmicfor}%
\algdef{SE}[FOR]{ForC}{EndFor}[3]
  {\printandpush\algorithmicfor\ #1\ \algorithmicfrom\ #2\ \algorithmicto\ #3 \algorithmicdo}
  {\popandprint\algorithmicend\ \algorithmicfor}%
\algdef{SE}[FOR]{ForStep}{EndFor}[4]
  {\printandpush\algorithmicfor\ #1\ \algorithmicfrom\ #2\ \algorithmicto\ #3\ \algorithmicstep #4\ \algorithmicdo}
  {\popandprint\algorithmicend\ \algorithmicfor}%
%\algdef{S}[FOR]{ForAll}[1]
%  {\printindent\algorithmicforall\ #1\ \algorithmicdo}%
\algdef{SE}[LOOP]{Loop}{EndLoop}
  {\printandpush\algorithmicloop}
  {\popandprint\algorithmicend\ \algorithmicloop}%
\algdef{SE}[REPEAT]{Repeat}{Until}
  {\printandpush\algorithmicrepeat}[1]
  {\popandprint\algorithmicuntil\ #1}%
\algdef{SE}[IF]{If}{EndIf}[1]
  {\printandpush\algorithmicif\ #1\ \algorithmicthen}
  {\popandprint\algorithmicend\ \algorithmicif}%
\algdef{SE}[BLOCK]{Begin}{End}[1]
  {\printandpush \algorithmicbegin\ #1}
  {\popandprint \algorithmicend}%
\algdef{SE}[BLOC]{Block}{EndBlock}[1]
  {\printandpush \algorithmicblock\ #1}
  {\popandprint \algorithmicend\ \algorithmicblock}%
\algdef{C}[IF]{IF}{ElsIf}[1]
  {\popandprint\pushindent\algorithmicelse\ \algorithmicif\ #1\ \algorithmicthen}%
\algdef{Ce}[ELSE]{IF}{Else}{EndIf}
  {\popandprint\pushindent\algorithmicelse}%
\algdef{SE}[PROCEDURE]{Procedure}{EndProcedure}[2]
   {\printandpush\algorithmicprocedure\ \textproc{#1}\ifthenelse{\equal{#2}{}}{}{(#2)}}%
   {\popandprint\algorithmicend\ \algorithmicprocedure}%
\algdef{SE}[FUNCTION]{Function}{EndFunction}[2]
   {\printandpush\algorithmicfunction\ \textproc{#1}\ifthenelse{\equal{#2}{}}{}{(#2)}}%
   {\popandprint\algorithmicend\ \algorithmicfunction}%
\algdef{SE}[SWITCH]{Switch}{EndSwitch}[1]
  {\printandpush\algorithmicswitch\ #1}
  {\popandprint\algorithmicend\ \algorithmicswitch}%
\algdef{SE}[SWITCH]{SwitchC}{EndSwitch}[1]
  {\printandpush\algorithmicswitch\ #1 \algorithmicworth}
  {\popandprint\algorithmicend\ \algorithmicswitch}%
\algdef{C}[SWITCH]{SWITCH}{Case}[1]
  {\popandprint\pushindent\ #1:}%
\algdef{SE}[STRUCT]{Struct}{EndStruct}[1]
  {\printandpush\algorithmicstruct\ #1}
  {\popandprint\algorithmicend\ \algorithmicstruct}%
\algdef{SE}[CLASS]{Class}{EndClass}[1]
  {\printandpush\algorithmicclass\ #1}
  {\popandprint\algorithmicend\ \algorithmicclass}%
\algdef{SE}[CUSTOM]{Custom}{EndCustom}
  {\printandpush}
  {\popandprint}%
  
% ==============================================================================
% Fin du code pour les lignes verticales
% ==============================================================================

% Ajouts propres pour la francisation des termes prédéfinis
\algnewcommand\algorithmicclass{\textbf{classe}}
\algnewcommand\algorithmicmethod{\textbf{méthode}}
\algnewcommand\algorithmicconstr{\textbf{constructeur}}
\algnewcommand\algorithmicstruct{\textbf{structure}}
\algnewcommand\algorithmicblock{\textbf{bloc}}
\algnewcommand\algorithmicbegin{\textbf{début}}
\algrenewcommand\algorithmicend{\textbf{fin}}
\algrenewcommand\algorithmicprocedure{\textbf{module}}
\algrenewcommand\algorithmicfunction{\textbf{module}}
\algrenewcommand\algorithmicwhile{\textbf{tant que}}
\algrenewcommand\algorithmicfor{\textbf{pour}}
\algrenewcommand\algorithmicfrom{\textbf{de}}
\algrenewcommand\algorithmicto{\textbf{à}}
\algrenewcommand\algorithmicstep{\textbf{par}}
\algrenewcommand\algorithmicrepeat{\textbf{faire}}
\algrenewcommand\algorithmicuntil{\textbf{jusqu'à ce que}}
\algrenewcommand\algorithmicdo{\textbf{faire}}
\algrenewcommand\algorithmicreturn{\textbf{retourner}}
\algrenewcommand\algorithmicif{\textbf{si}}
\algrenewcommand\algorithmicthen{\textbf{alors}}
\algrenewcommand\algorithmicelse{\textbf{sinon}}
\algnewcommand\algorithmicswitch{\textbf{selon que}}
\algnewcommand\algorithmicworth{\textbf{vaut}}
\floatname{algorithm}{Algorithme}

% Modifications de style
\algrenewcommand\textproc{\textit} % Nom de module en italique plutôt qu'en small caps
\restylefloat{ labelsep=b }

% ajout d'e petits éléments de syntaxe non existants
\newcommand{\In}{\ensuremath{\downarrow}}
\newcommand{\Out}{\ensuremath{\uparrow}}
\newcommand{\InOut}{\In{}\Out{}}
\newcommand{\Gets}{\ensuremath{\gets}\ }
\newcommand{\Gives}{\ \ensuremath{\rightarrow}{}}
\newcommand{\T}[1]{\textsf{#1}} % Type
\newcommand{\K}[1]{\textbf{#1}} % Keyword

\newcommand{\From}{\textbf{de}\ }
\newcommand{\To}{\textbf{à}\ }
\newcommand{\By}{\textbf{par}\ }

%\definecolor{declarecolor}{gray}{0.2}
\newcommand{\Declare}[2]{\LState{#1 : #2}}
\newcommand{\Decl}{\LState}
\renewcommand{\Return}{\LState\algorithmicreturn\ }
%\newcommand{\Gets}[2]{\LState #1 \ensuremath{\gets}{} #2}
\newcommand{\Open}{\LState\textbf{ouvrir}\ }
\newcommand{\Close}{\LState\textbf{fermer}\ }
\newcommand{\Read}{\LState\textbf{lire}\ }
\newcommand{\Readf}{\LState\textbf{lire}\ }
\newcommand{\Write}{\LState\textbf{afficher}\ }
\newcommand{\Writef}{\LState\textbf{écrire}\ }
\newcommand{\Empty}{\LState}
\newcommand{\Stmt}{\LState}
\newcommand{\Let}{\LState}
\newcommand{\Error}{\LState\textbf{erreur}\ }

% \Module{nom}{param}{return_type} ... \EndModule
\algblockdefx[MODULE]{Module}{EndModule}[3]%
{\printandpush\algorithmicprocedure\ \textproc{#1}(#2)\ifthenelse{\equal{#3}{}}{}{\Gives\ #3}}
{\popandprint\algorithmicend\ \algorithmicprocedure}
\algblockdefx[METHOD]{Method}{EndMethod}[3]%
{\printandpush\algorithmicmethod\ \textproc{#1}(#2)\ifthenelse{\equal{#3}{}}{}{\Gives\ #3}}
{\popandprint\algorithmicend\ \algorithmicmethod}
\algblockdefx[CONSTR]{Constr}{EndConstr}[2]%
{\printandpush\algorithmicconstr\ \textproc{#1}(#2)}
{\popandprint\algorithmicend\ \algorithmicconstr}
\algdef{C}[CLASS]{CLASS}{Private}{\popandprint\pushindent\ privé:}%
\algdef{C}[CLASS]{CLASS}{Public}{\popandprint\pushindent\ public:}%
\newcommand{\ModuleSign}[3]{\Stmt \algorithmicprocedure\ \textproc{#1}(#2)\ifthenelse{\equal{#3}{}}{}{\Gives\ #3}}
\newcommand{\MethodSign}[3]{\Stmt \algorithmicmethod\ \textproc{#1}(#2)\ifthenelse{\equal{#3}{}}{}{\Gives\ #3}}
\newcommand{\ConstrSign}[2]{\Stmt \algorithmicconstr\ \textproc{#1}(#2)}

\algrenewcommand{\algorithmiccomment}[1]{{\small\hskip1em// #1}}
\newcommand{\LComment}{\Empty\hskip-1em\Comment}
\newcommand{\RComment}{\hfill\Comment}
\newcommand{\Indent}{\expandafter\hskip\algorithmicindent\relax}
\newcommand{\Suite}{\Stmt\Indent\Indent}

% =====
\newenvironment{pseudo}{%
	\begin{minipage}{0.95\linewidth}
	\begin{sffamily}
	\begin{algorithmic}[0]
	\small
}{%
	\end{algorithmic}
	\end{sffamily}
	\end{minipage}
}

\NewEnviron{pseudoC}{%
    \cadre{
    \begin{pseudo}
        \BODY
    \end{pseudo}
    }
  }

\newcommand{\cadre}[1]{%
	\fcolorbox{gray}{gray!10}{%
		\begin{minipage}{0.97\linewidth}#1\end{minipage}%
	}%
	\smallskip
}

\newcommand{\code}{\textsf}
